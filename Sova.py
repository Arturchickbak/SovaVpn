import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram.exceptions import TelegramBadRequest
import asyncio
from aiogram.exceptions import TelegramBadRequest

TOKEN = "7876814497:AAE8i2DlhaY4DFDqgUbMDd5oVFcJnT_wgI0"
PROVIDER_TOKEN = "390540012:LIVE:62444"
CONFIG_KZ = r"C:\Users\—Ö–æ–∑—è–∏–Ω\Desktop\Sova\client1.ovpn"
DB_PATH = "sovavpn_users.db"
CHANNEL_USERNAME = "SovaVpnNews"
CHANNEL_LINK = f"https://t.me/{CHANNEL_USERNAME}"
INSTRUCTIONS_LINK = "https://sovavpn.online/"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            start_date TEXT,
            server TEXT,
            balance INTEGER DEFAULT 0,
            vpn_subscriptions INTEGER DEFAULT 0
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS payments (
            payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER,
            payment_type TEXT,
            timestamp TEXT,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    """)

    conn.commit()
    conn.close()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
async def is_user_subscribed(user_id):
    try:
        chat_member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest:
        return False

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É ---
def add_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        start_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO users (user_id, start_date, server, balance, vpn_subscriptions) VALUES (?, ?, ?, ?, ?)", 
                       (user_id, start_date, None, 0, 0))
        conn.commit()
    conn.close()

# --- –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    add_user(user_id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT balance, vpn_subscriptions FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    balance = user_data[0] if user_data else 0
    vpn_subs = user_data[1] if user_data else 0

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="connect_vpn")],
        [InlineKeyboardButton(text="üí≥ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="menu")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", url=INSTRUCTIONS_LINK),
         InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", url="https://t.me/Arthur_serg")]
    ])



    profile_text = f"""
üë®‚Äçüíª **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
üìå **ID:** `{user_id}`
üí∞ **–ë–∞–ª–∞–Ω—Å:** {balance} ‚ÇΩ
üîê **–ê–∫—Ç–∏–≤–Ω—ã–µ VPN-–ø–æ–¥–ø–∏—Å–∫–∏:** {vpn_subs}

üì° **–ö–∞–Ω–∞–ª [üöÄ Sova VPN]({CHANNEL_LINK})**
üí¨ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ö° –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
    """
    
    await message.answer(profile_text, parse_mode="Markdown", reply_markup=keyboard)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π VPN ---
@dp.callback_query(F.data == "connect_vpn")
async def connect_vpn_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if await is_user_subscribed(user_id):
        vpn_price = 999
        amount = vpn_price * 100

        prices = [LabeledPrice(label=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN ({vpn_price} ‚ÇΩ)", amount=amount)]
        
        await bot.send_invoice(
            chat_id=user_id,
            title="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN",
            description=f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ SovaVpn —Å –¥–æ—Å—Ç—É–ø–æ–º –ù–ê–í–°–ï–ì–î–ê–ª –∑–∞ {vpn_price} ‚ÇΩ",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            payload=f"vpn_{user_id}"
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        await callback.message.answer("‚ùó –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.", reply_markup=keyboard)

import asyncio
from aiogram.exceptions import TelegramBadRequest

import asyncio
from aiogram.exceptions import TelegramBadRequest

async def is_user_subscribed(user_id):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª """
    try:
        chat_member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

@dp.callback_query(F.data == "check_subscription")
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="confirm_subscription")]
        ]
    )

    await callback.message.edit_text(
        "‚ùó –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'.", 
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "confirm_subscription")
async def confirm_subscription_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")

    # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start (–≤—ã–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä)
    await start_handler(callback.message)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã VPN ---
@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î) ---
@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount // 100
    payment_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if message.successful_payment.invoice_payload.startswith("vpn_"):
        payment_type = "VPN"
        cursor.execute("UPDATE users SET vpn_subscriptions = vpn_subscriptions + 1 WHERE user_id = ?", (user_id,))
        
        vpn_config = FSInputFile(CONFIG_KZ)
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 1 –≥–æ–¥!")
        await message.answer_document(vpn_config)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± iPhone / iPad", callback_data="device_ios"),
             InlineKeyboardButton(text="ü§ñ Android", callback_data="device_android")],
            [InlineKeyboardButton(text="üíª Windows", callback_data="device_windows"),
             InlineKeyboardButton(text="üñ•Ô∏è Apple Mac", callback_data="device_mac")],
            [InlineKeyboardButton(text="üêß Linux", callback_data="device_linux"),
             InlineKeyboardButton(text="üì∫ Android TV", callback_data="device_android_tv")]
        ])
        await message.answer("üîß **–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN?**", reply_markup=keyboard)

    elif message.successful_payment.invoice_payload.startswith("balance_"):
        payment_type = "–ë–∞–ª–∞–Ω—Å"
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id,))
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚ÇΩ.")

    cursor.execute(
        "INSERT INTO payments (user_id, amount, payment_type, timestamp) VALUES (?, ?, ?, ?)",
        (user_id, amount, payment_type, payment_time)
    )

    conn.commit()
    conn.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
@dp.callback_query(F.data.startswith("device_"))
async def device_selected_handler(callback: types.CallbackQuery):
    device = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    instructions = {
        "ios": {
            "text": "üì± **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone / iPad**:\n\n"
                    "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ **OpenVPN Connect**: [App Store](https://apps.apple.com/app/openvpn-connect/id590379981)\n"
                    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ `.ovpn` —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ OpenVPN.\n"
                    "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **'Connect'** –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! üîí",
            "images": ["C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/ios1.png",
                       "C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/ios2.png",
                       "C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/ios3.png"]
        },
        "android": {
            "text": "ü§ñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android**:\n\n"
                    "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ **OpenVPN Connect**: [Google Play](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)\n"
                    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ `.ovpn` —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ OpenVPN.\n"
                    "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **'Connect'** –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üîí",
            "images": ["C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/android1.png",
                       "C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/photo_2025-03-15_19-09-29.jpg"]
        },
        "windows": {
            "text": "üíª **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows**:\n\n"
                    "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ **OpenVPN –¥–ª—è Windows**: [–ó–∞–≥—Ä—É–∑–∏—Ç—å](https://openvpn.net/community-downloads/)\n"
                    "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `.ovpn` —Ñ–∞–π–ª.\n"
                    "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **'–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'** –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN! üîí",
            "images": ["C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/windows1.png",
                       "C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/windows2.png"]
        },
        "mac": {
            "text": "üñ•Ô∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Mac**:\n\n"
                    "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ **OpenVPN**: [–ó–∞–≥—Ä—É–∑–∏—Ç—å](https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg/)\n"
                    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ `.ovpn` —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ OpenVPN.\n"
                    "3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN! üîí",
            "images": ["C:/Users/—Ö–æ–∑—è–∏–Ω/Desktop/SovaVpn/instructions/mac1.png"]
        },
        "linux": {
            "text": "üêß **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Linux**:\n\n"
                    "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenVPN —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
                    "```sudo apt install openvpn```\n"
                    "2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ VPN –∫–æ–º–∞–Ω–¥–æ–π:\n"
                    "```sudo openvpn --config /–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.ovpn```",
            "images": []
        },
        "android_tv": {
            "text": "üì∫ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android TV**:\n\n"
                    "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ **OpenVPN Connect** —á–µ—Ä–µ–∑ Google Play.\n"
                    "2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ `.ovpn` —Ñ–∞–π–ª.\n"
                    "3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN!",
            "images": []
        }
    }

    instruction = instructions.get(device)

    if instruction:
        await callback.message.answer(instruction["text"], parse_mode="Markdown", disable_web_page_preview=True)
        for image_path in instruction["images"]:
            await callback.message.answer_photo(photo=FSInputFile(image_path))

    await callback.answer()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π ---
@dp.message(Command("payments"))
async def show_payments(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT amount, payment_type, timestamp FROM payments WHERE user_id = ? ORDER BY timestamp DESC LIMIT 5", (user_id,))
    payments = cursor.fetchall()
    conn.close()

    history = "\n".join([f"üí∞ {row[0]} ‚ÇΩ | {row[1]} | üïí {row[2]}" for row in payments]) if payments else "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π."
    await message.answer(f"üìú **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:**\n\n{history}", parse_mode="Markdown")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())