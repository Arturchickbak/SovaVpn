from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
import logging, asyncio, datetime
import requests

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö
users = {}
subscriptions = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Outline API
OUTLINE_API_URL = "http://127.0.0.1:8081/access-keys"
OUTLINE_API_KEY = "–í–ê–®_API_–ö–õ–Æ–ß_OUTLINE"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscriptions(context: CallbackContext):
    now = datetime.datetime.now()
    for user_id, sub_end in list(subscriptions.items()):
        if now >= sub_end:
            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
            del subscriptions[user_id]
            await context.bot.send_message(chat_id=user_id, text="‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ Outline
def create_outline_key():
    headers = {"Authorization": f"Bearer {OUTLINE_API_KEY}"}
    response = requests.post(OUTLINE_API_URL, headers=headers)
    if response.status_code == 200:
        key_data = response.json()
        return key_data["accessUrl"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    else:
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
async def start(update: Update, context: CallbackContext) -> None:
    gif_url = "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWVtbjR2dHIzcGdvaDdwMThqZ3M5bnBwMDN2cjdleDFmc3o1cmt6ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/JSdj7V1G7wQIcDXVcN/giphy.gif"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ñ–∫—É
    await context.bot.send_animation(chat_id=update.effective_chat.id, animation=gif_url)

    await update.message.reply_text(
        "–ß—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN.\n\n"
        "\U0001F44D –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
    )
    keyboard = [[InlineKeyboardButton("üéâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN üéâ", callback_data="connect_vpn")]]
    await update.message.reply_text("–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN
async def connect_vpn(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in users:
        users[user_id] = {"balance": 100, "key": create_outline_key() or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á"}
    
    await query.edit_message_text(
        f"–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}!\n\n"
        "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –î–∞—Ä–∏–º –≤–∞–º 100–† –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
        "üí∞ –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ!\n"
        "üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!\n"
        "üåç –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º!\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ üá∑üá∫ –∏ –°–ë–ü!\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å 100–†/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n\n"
        f"–í–∞—à –∫–ª—é—á: {users[user_id]['key']}"
    )
    keyboard = [[InlineKeyboardButton("üéâ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üéâ", callback_data="menu")]]
    await query.message.reply_text("\U0001F44D –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup=InlineKeyboardMarkup(keyboard))

# –ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def recharge_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("100–†", callback_data="pay_100"), InlineKeyboardButton("200–†", callback_data="pay_200")],
        [InlineKeyboardButton("300–†", callback_data="pay_300"), InlineKeyboardButton("500–†", callback_data="pay_500")]
    ]
    await query.edit_message_text(
        "–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã
async def process_payment(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    amount = int(query.data.split("_")[1])
    if user_id in users:
        users[user_id]["balance"] += amount
        subscriptions[user_id] = datetime.datetime.now() + datetime.timedelta(days=30)
        users[user_id]["key"] = create_outline_key() or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á"
        await query.edit_message_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']}–†.\n"
            f"üîë –í–∞—à –∫–ª—é—á: {users[user_id]['key']}\n\n"
            "–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!"
        )
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üì± Android", callback_data="device_android")],
            [InlineKeyboardButton("üì± iOS (iPhone, iPad)", callback_data="device_ios")]
        ]
        await query.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, 100–† —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à VPN. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async def device_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "device_android":
        await query.edit_message_text(
            "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Android:\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏–∑ Google Play.\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n"
            "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å!"
        )
    elif query.data == "device_ios":
        await query.edit_message_text(
            "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iOS (iPhone, iPad):\n"
            "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏–∑ App Store.\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n"
            "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å!"
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = "7876814497:AAE8i2DlhaY4DFDqgUbMDd5oVFcJnT_wgI0"

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(connect_vpn, pattern="connect_vpn"))
    application.add_handler(CallbackQueryHandler(recharge_menu, pattern="menu"))
    application.add_handler(CallbackQueryHandler(process_payment, pattern="pay_.*"))
    application.add_handler(CallbackQueryHandler(device_choice, pattern="device_.*"))

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    application.job_queue.run_repeating(check_subscriptions, interval=60, first=10)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
